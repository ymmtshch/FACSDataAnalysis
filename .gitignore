# .gitignore - Updated for FACS Data Analysis App
# Migration from flowkit to fcsparser

# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/#use-with-ide
.pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be added to the global gitignore or merged into this project gitignore.  For a PyCharm
#  project, it is recommended to create a separate .gitignore file in the root directory
#  of the project and extend it with the following rules:
#  PyCharm
.idea/

# VS Code
.vscode/

# Streamlit specific
.streamlit/secrets.toml

# FCS Data files (usually large and should not be committed)
*.fcs
*.FCS
data/
sample_data/
test_data/
uploads/

# Analysis results
results/
output/
exports/
*.csv
*.xlsx
*.png
*.jpg
*.jpeg
*.pdf
*.html

# Temporary files
*.tmp
*.temp
*~
.DS_Store
Thumbs.db

# Windows specific
Desktop.ini
ehthumbs.db

# Logs
logs/
*.log

# Cache directories
.cache/
cache/

# Pickle files (serialized objects)
*.pkl
*.pickle

# Backup files
*.bak
*.backup

# Compressed files
*.zip
*.tar.gz
*.rar

# Configuration files with sensitive data
config_local.py
secrets.py
.env.local
.env.production

# Documentation build
docs/build/
docs/_build/

# Profiling data
*.prof

# Gate definitions (if containing sensitive data)
gate_definitions/
saved_gates/

# User-specific files
user_settings.json
user_preferences.json

# Temporary upload directories
tmp_uploads/
temp_files/

# Database files
*.db
*.sqlite

# R files (if any R integration)
.Rproj.user/
.Rhistory
.RData
.Ruserdata

# MATLAB files (if any MATLAB integration)
*.asv
*.m~

# Jupyter notebook checkpoints
.ipynb_checkpoints/

# Local development files
local_config.py
dev_settings.py

# Performance profiling
*.prof
*.profile

# Memory profiling
*.mem

# Coverage reports
htmlcov/
.coverage
coverage.xml

# Pytest
.pytest_cache/

# Mypy
.mypy_cache/

# Type checking
.pytype/

# Pylint
.pylint.d/

# Bandit security scanner
.bandit

# Safety scanner
.safety

# Pre-commit hooks
.pre-commit-config.yaml

# Local run scripts
run_local.sh
run_dev.sh
start_app.sh

# Docker files (if not using Docker)
Dockerfile
docker-compose.yml
.dockerignore

# Kubernetes files (if not using Kubernetes)
k8s/
kubernetes/

# Terraform files (if not using Terraform)
*.tfstate
*.tfstate.backup
.terraform/
